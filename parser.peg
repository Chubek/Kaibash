%value "struct Stack**"

%header { 
	#include "tables.h"
	#include "machine.h"
}

%source { extern struct Stack* vm; }


Program            <- Command* Eof

Command            <- SimpleCommand
                   / IfStatement
                   / WhileLoop
                   / ForLoop
                   / CaseStatement
                   / FunctionDefinition
                   / VariableAssignment
                   / Comment
                   / CompoundCommand
                   / TestExpr

SimpleCommand      <- Word
		   / SimpleCommand Word
		   / SimpleCommand Redirections

Word               <- String
		  / QuotedString
                  / BacktickExpansion
                  / WordLiteral
		  / NoNewlineWordLiteral
		  / NoSpaceWordLiteral
                  / Substitution

WordLiteral       <- AnyCharExceptNewlineAndSpace+

NoNewlineWordLiteral <- AnyCharExceptNewline+

NoSpaceWordLiteral <- AnyCharExceptSpace+

QuotedString       <- "'" AnyCharExceptNewline "'"

String             <- '"' ( AnyChar / Substitution )* '"'

BacktickExpansion  <- '`' ( AnyChar / Substitution )* '`'

Substitution       <- VariableSubstitution 
                  / CommandSubstitution 
                  / ArithmeticSubstitution

VariableSubstitution <- "$" (Name / ComplexVariable)

ComplexVariable    <- Name ( ":" Alternative
                          / Alternative
                          / "#" RemoveSmallestSuffix 
                          / "##" RemoveLargestSuffix 
                          / "%" RemoveSmallestPrefix 
                          / "%%" RemoveLargestPrefix 
                          / "/" ReplaceFirst 
                          / "//" ReplaceAll
                        )?

Alternative        <- "=" Pattern
                  / "+" Pattern
                  / "-" Pattern
                  / "?" Pattern

RemoveSmallestSuffix <- "%" Pattern
RemoveLargestSuffix <- "%%" Pattern
RemoveSmallestPrefix <- "#" Pattern
RemoveLargestPrefix <- "##" Pattern
ReplaceFirst       <- "/" Pattern "/" Replacement
ReplaceAll         <- "//" Pattern "/" Replacement

CommandSubstitution <- "$(" CompoundCommand ")"
ArithmeticSubstitution <- "$((" ArithmeticExpression "))"

ArithmeticExpression <- Term (Addition / Subtraction Term)*
Addition           <- "+" Term
Subtraction        <- "-" Term

Term               <- Factor (Multiplication / Division Factor)*
Multiplication     <- "*" Factor
Division           <- "/" Factor

Factor             <- [0-9]+
                  / Substitution

Pattern            <- AnyChar*
Replacement        <- AnyChar*

Name               <- [a-zA-Z_][a-zA-Z_0-9]*

Redirections       <- Redirection
		   / Redirections _ Redirection

Redirection        <- InputRedirection
                  / OutputRedirection
                  / AppendOutputRedirection
                  / DuplicateOutputRedirection
                  / DuplicateInputRedirection
                  / HereDocument
                  / HereString

InputRedirection   <- FD? "<" Word
OutputRedirection  <- FD? ">" Word
AppendOutputRedirection <- FD? ">>" Word
DuplicateOutputRedirection <- FD? "&>" Word
DuplicateInputRedirection <- FD "<&" Word
HereDocument      <- FD? "<<" Delimiter
HereString        <- FD? "<<<" Word

FD                <- [0-9]+
Delimiter         <- String

IfStatement       <- i:IfPrefix "then" m:CompoundCommand "fi"
		   { test_if_stmt(i, m); }
		  / i:IfPrefix "then" m:CompoundCommand "else" c:CompoundCommand "fi"
		   { test_if_else_stmt(i, m, c); }

IfPrefix          <- ("if" | "elif") CompoundCommand { $$ = &vm; }

WhileLoop         <- w:WhileLoopPrefix "do" c:CompoundCommand "done"
		   { exhaust_while_loop(w, c); }

WhileLoopPrefix     <- "while" CompoundCommand { $$ = &vm; }

ForLoop           <- f:ForLoopPrefix "in" w:WordList "do" c:CompoundCommand "done"
                    { exhaust_for_loop(f, w, c); }

ForLoopPrefix       <- "for" Name { $$ = &vm; }

WordList          <- Word
		   / WordList _ Word

CaseStatement     <- "case" Word "in" __ (PatternList ")" __ CompoundCommand __ ";;")+ __ "esac"

PatternList       <- Word
		  / PatternList _ "|" _ Word

FunctionDefinition <- ("function" / "") _  n:Name _  "()" _  "{" __ CompoundCommand __ "}" { insert_symbol(n, (char*)&vm); }

VariableAssignment <- Name "=" Word

Comment           <- "#" AnyCharExceptNewline* "\n"

CompoundCommand   <- Command
		  / CompoundCommand _ ';' _ Command
		  / CompoundCommand _ '|' _ Command
		  / CompoundCommand _ '&' _ Command?

TestExpr          <- "test" _ TestJunction
		  / "[" _ TestJunction _ "]"

TestJunction      <- TestTerm _ BinaryOperator _ TestTerm
		  / TestTerm

TestTerm          <- NormalTestTerm
		  / NegatedTestTerm

NegatedTestTerm   <- "!" TestTerm

NormalTestTerm    <- UnaryOperator Word
		  

UnaryOperator     <- "-b"
                 / "-c"
                 / "-d"
                 / "-e"
                 / "-f"
                 / "-g"
                 / "-h"
                 / "-k"
                 / "-p"
                 / "-r"
                 / "-s"
                 / "-t"
                 / "-u"
                 / "-w"
                 / "-x"
                 / "-z"

BinaryOperator   <- "-eq"
                 / "-ne"
                 / "-lt"
                 / "-le"
                 / "-gt"
                 / "-ge"


AnyCharExceptNewlineAndSpace <- ![ \t\r\n]
AnyCharExceptSpace <- ![ \t]
AnyCharExceptNewline <- ![\n\r]

AnyChar      <- .

Eof               <- !.

_                 <- [ \t]*
__		  <- [ \t\r\n]*
