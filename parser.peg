Program            <- Command* Eof

Command            <- SimpleCommand
                   / IfStatement
                   / WhileLoop
                   / ForLoop
                   / CaseStatement
                   / FunctionDefinition
                   / VariableAssignment
                   / Comment
                   / CompoundCommand
                   / TestExpr

SimpleCommandRedir <- SimpleCommand _ Redirections

SimpleCommand      <- Word ( _ Word )*

Redirections       <- Redirection ( _ Redirection )*

Redirection        <- InputRedirection
                  / OutputRedirection
                  / AppendOutputRedirection
                  / DuplicateOutputRedirection
                  / DuplicateInputRedirection
                  / HereDocument
                  / HereString

InputRedirection   <- FD? "<" Word
OutputRedirection  <- FD? ">" Word
AppendOutputRedirection <- FD? ">>" Word
DuplicateOutputRedirection <- FD? "&>" Word
DuplicateInputRedirection <- FD "<&" Word
HereDocument      <- FD? "<<" Delimiter
HereString        <- FD? "<<<" Word

Word               <- String
                  / QuotedString
                  / BacktickExpansion
                  / WordLiteral
                  / NoNewlineWordLiteral
                  / NoSpaceWordLiteral
                  / Substitution

WordLiteral       <- AnyCharExceptNewlineAndSpace+

NoNewlineWordLiteral <- AnyCharExceptNewline+

NoSpaceWordLiteral <- AnyCharExceptSpace+

QuotedString       <- "'" AnyCharExceptNewline "'"

String             <- '"' ( AnyCharExceptNewline / Substitution )* '"'

BacktickExpansion  <- '`' ( AnyCharExceptNewline / Substitution / CompoundCommand )* '`'

Substitution       <- VariableSubstitution 
                  / CommandSubstitution 
                  / ArithmeticSubstitution

VariableSubstitution <- "$" (Name / ComplexVariable)

ComplexVariable    <- Name ( ":" Alternative
                          / Alternative
                          / "#" RemoveSmallestSuffix 
                          / "##" RemoveLargestSuffix 
                          / "%" RemoveSmallestPrefix 
                          / "%%" RemoveLargestPrefix 
                          / "/" ReplaceFirst 
                          / "//" ReplaceAll
                        )?

Alternative        <- "=" Pattern
                  / "+" Pattern
                  / "-" Pattern
                  / "?" Pattern

RemoveSmallestSuffix <- "%" Pattern
RemoveLargestSuffix <- "%%" Pattern
RemoveSmallestPrefix <- "#" Pattern
RemoveLargestPrefix <- "##" Pattern
ReplaceFirst       <- "/" Pattern "/" Replacement
ReplaceAll         <- "//" Pattern "/" Replacement

CommandSubstitution <- "$(" CompoundCommand ")"
ArithmeticSubstitution <- "$((" ArithmeticExpression "))"

ArithmeticExpression <- Term (Addition / Subtraction Term)*
Addition           <- "+" Term
Subtraction        <- "-" Term

Term               <- Factor (Multiplication / Division Factor)*
Multiplication     <- "*" Factor
Division           <- "/" Factor

Factor             <- [0-9]+
                  / Substitution

Pattern            <- AnyChar*
Replacement        <- AnyChar*

Name               <- [a-zA-Z_][a-zA-Z_0-9]*

FD                <- [0-9]+
Delimiter         <- String

IfStatement       <- IfPrefix "then" CompoundCommand "fi"
                  / IfPrefix "then" CompoundCommand "else" CompoundCommand "fi"

IfPrefix          <- ("if" / "elif") CompoundCommand

WhileLoop         <- WhileLoopPrefix "do" CompoundCommand "done"

WhileLoopPrefix   <- "while" CompoundCommand

ForLoop           <- ForLoopPrefix "in" WordList "do" CompoundCommand "done"

ForLoopPrefix     <- "for" Name

WordList          <- Word ( _ Word )*

CaseStatement     <- "case" Word "in" __ CasePatternMultiple  __ "esac"

CasePatternMultiple <- CasePatternSingle ( __ ";;" __ CasePatternMultiple )?

CasePatternSingle   <- PatternList ")" __ CompoundCommand __

PatternList       <- Word ( _ "|" _ Word )*

FunctionDefinition <- ("function" / "") _ Name _ "()" _ "{" CompoundCommand "}"

VariableAssignment <- Name "=" Word

Comment           <- "#" AnyCharExceptNewline* "\n"

CmpoundCommand   <- Command ( _ ';' _ Command )*
                  / Command _ '&' _ Command?

TestExpr          <- "test" _ TestJunction
                  / "[" _ TestJunction _ "]"

TestJunction      <- TestTerm _ BinaryOperator _ TestTerm
                  / TestTerm

TestTerm          <- NormalTestTerm
                  / NegatedTestTerm

NegatedTestTerm   <- "!" TestTerm

NormalTestTerm    <- UnaryOperator Word

UnaryOperator     <- "-b"
                  / "-c"
                  / "-d"
                  / "-e"
                  / "-f"
                  / "-g"
                  / "-h"
                  / "-k"
                  / "-p"
                  / "-r"
                  / "-s"
                  / "-t"
                  / "-u"
                  / "-w"
                  / "-x"
                  / "-z"

BinaryOperator    <- "-eq"
                  / "-ne"
                  / "-lt"
                  / "-le"
                  / "-gt"
                  / "-ge"

AnyCharExceptNewlineAndSpace <- ![ \t\r\n]
AnyCharExceptSpace <- ![ \t]
AnyCharExceptNewline <- ![\n\r]

AnyChar           <- .

Eof               <- !.

_                 <- [ \t]*
__                <- [ \t\r\n]*
o
