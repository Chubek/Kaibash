Program            <- Command* Eof

Command            <- SimpleCommand
                   / Pipeline
                   / IfStatement
                   / ElifStatement
                   / WhileLoop
                   / ForLoop
                   / CaseStatement
                   / FunctionDefinition
                   / VariableAssignment
                   / Comment
                   / Redirection
                   / CompoundCommand
                   / TestCommand

SimpleCommand      <- Word* Redirections?

Word               <- String
                  / BacktickExpansion
                  / AnyCharExceptSpace
                  / Substitution

GlobPattern        <- (WildcardGlob
                   / CharacterClass 
                   / AnyCharGlob
                   / Escape
                  )+

WildcardGlob       <- "*"
CharacterClass     <- "[" (!"]" .)+ "]"
AnyCharGlob        <- "." 
Escape             <- "\\" .

String             <- '"' ( AnyCharacter / Substitution )* '"'

BacktickExpansion  <- '`' ( AnyCharacter / Substitution )* '`'

Substitution       <- VariableSubstitution 
                  / CommandSubstitution 
                  / ArithmeticSubstitution

VariableSubstitution <- "$" (Name / ComplexVariable)

ComplexVariable    <- Name ( ":" Alternative
                          / Alternative
                          / ":" GlobPattern 
                          / "#" RemoveSmallestSuffix 
                          / "##" RemoveLargestSuffix 
                          / "%" RemoveSmallestPrefix 
                          / "%%" RemoveLargestPrefix 
                          / "/" ReplaceFirst 
                          / "//" ReplaceAll
                        )?

Alternative        <- "=" Pattern
                  / "+" Pattern
                  / "-" Pattern
                  / "?" Pattern

RemoveSmallestSuffix <- "%" Pattern
RemoveLargestSuffix <- "%%" Pattern
RemoveSmallestPrefix <- "#" Pattern
RemoveLargestPrefix <- "##" Pattern
ReplaceFirst       <- "/" Pattern "/" Replacement
ReplaceAll         <- "//" Pattern "/" Replacement

CommandSubstitution <- "$(" CompoundCommand ")"
ArithmeticSubstitution <- "$((" ArithmeticExpression "))"

ArithmeticExpression <- Term (Addition / Subtraction Term)*
Addition           <- "+" Term
Subtraction        <- "-" Term

Term               <- Factor (Multiplication / Division Factor)*
Multiplication     <- "*" Factor
Division           <- "/" Factor

Factor             <- [0-9]+
                  / Substitution

Pattern            <- AnyCharacter*
Replacement        <- AnyCharacter*

Name               <- [a-zA-Z_][a-zA-Z_0-9]*

Redirections       <- Redirection*

Redirection        <- InputRedirection
                  / OutputRedirection
                  / AppendOutputRedirection
                  / DuplicateOutputRedirection
                  / DuplicateInputRedirection
                  / HereDocument
                  / HereString

InputRedirection   <- FD? "<" Word
OutputRedirection  <- FD? ">" Word
AppendOutputRedirection <- FD? ">>" Word
DuplicateOutputRedirection <- FD? "&>" Word
DuplicateInputRedirection <- FD "<&" Word
HereDocument      <- FD? "<<" Delimiter
HereString        <- FD? "<<<" Word

FD                <- [0-9]+
Delimiter         <- String

Pipeline          <- Command ("|" Command)*

IfStatement       <- "if" CompoundCommand "then" CompoundCommand ("else" CompoundCommand)? "fi"
                 / "if" CompoundCommand "then" CompoundCommand "fi"

ElifStatement     <- "elif" CompoundCommand "then" CompoundCommand

WhileLoop         <- "while" CompoundCommand "do" CompoundCommand "done"

ForLoop           <- "for" Name "in" WordList "do" CompoundCommand "done"

WordList          <- Word+

CaseStatement     <- "case" Word "in" (PatternList ")" CompoundCommand ";;")+ "esac"

PatternList       <- Word ("|" Word)*

FunctionDefinition <- ("function" / "") Name "()" "{" CompoundCommand "}"

VariableAssignment <- Name "=" Word

Comment           <- "#" AnyCharacter*

CompoundCommand   <- Command+

TestExpr          <- "test" TestJunction
		  / "[" TestJunction "]"

TestJunction      <- TestTerm BinaryOperator TestTerm
		  / TestTerm

TestTerm          <- NormalTestTerm
		  / NegatedTestTerm

NegatedTestTerm   <- "!" TestTerm

NormalTestTerm    <- UnaryOperator Word
		  

UnaryOperator     <- "-b"
                 / "-c"
                 / "-d"
                 / "-e"
                 / "-f"
                 / "-g"
                 / "-h"
                 / "-k"
                 / "-p"
                 / "-r"
                 / "-s"
                 / "-t"
                 / "-u"
                 / "-w"
                 / "-x"
                 / "-z"

BinaryOperator   <- "-eq"
                 / "-ne"
                 / "-lt"
                 / "-le"
                 / "-gt"
                 / "-ge"

AnyCharExceptSpace <- ![ \t]

AnyCharacter      <- .

Eof               <- !.

_                 <- [ \t]*
x
