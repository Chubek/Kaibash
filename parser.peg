Program            <- Command* Eof

CompoundCommand   <- List
                   / IfStatement
                   / WhileLoop
                   / ForLoop
                   / CaseStatement
                   / FunctionDefinition
                   / VariableAssignment
                   / Comment
                   / TestExpr

List		   <- Pipeline ( _ "&&" _ Pipeline )*
		   /  Pipeline ( _ "||" _ Pipeline )*

Pipeline	   <- Banged? _ SimpleCommand _ (  _ "|" _ SimpleCommand )*

SimpleCommand      <- Word ( _ Word )* Redirections?

Redirections       <- Redirection ( _ Redirection )*

Redirection        <- InputRedirection
                  / OutputRedirection
                  / AppendOutputRedirection
                  / DuplicateOutputRedirection
                  / DuplicateInputRedirection
                  / HereDocument
                  / HereString

InputRedirection   <- FD? "<" Word
OutputRedirection  <- FD? ">" Word
AppendOutputRedirection <- FD? ">>" Word
DuplicateOutputRedirection <- FD? "&>" Word
DuplicateInputRedirection <- FD "<&" Word
HereDocument      <- FD? "<<" Delimiter
HereString        <- FD? "<<<" Word

Word               <- String
                  / QuotedString
                  / BacktickExpansion
                  / WordLiteral
                  / NoNewlineWordLiteral
                  / NoSpaceWordLiteral
                  / Substitution

WordLiteral       <- AnyCharExceptNewlineAndSpace+

NoNewlineWordLiteral <- AnyCharExceptNewline+

NoSpaceWordLiteral <- AnyCharExceptSpace+

QuotedString       <- "'" AnyCharExceptNewline "'"

String             <- '"' ( AnyCharExceptNewline / Substitution )* '"'

BacktickExpansion  <- '`' ( AnyCharExceptNewline / Substitution / CompoundCommand )* '`'

Substitution       <- VariableSubstitution 
                  / CommandSubstitution 
                  / ArithmeticSubstitution
		  / TildeExpansion

TileExpansion      <- "~"

VariableSubstitution <- "$" (Name / ComplexVariable)

ComplexVariable    <- Name ( ":" Alternative
                          / Alternative
                          / "#" RemoveSmallestSuffix 
                          / "##" RemoveLargestSuffix 
                          / "%" RemoveSmallestPrefix 
                          / "%%" RemoveLargestPrefix 
                          / "/" ReplaceFirst 
                          / "//" ReplaceAll
                        )?

Alternative        <- "=" Pattern
                  / "+" Pattern
                  / "-" Pattern
                  / "?" Pattern

RemoveSmallestSuffix <- "%" Pattern
RemoveLargestSuffix <- "%%" Pattern
RemoveSmallestPrefix <- "#" Pattern
RemoveLargestPrefix <- "##" Pattern
ReplaceFirst       <- "/" Pattern "/" Replacement
ReplaceAll         <- "//" Pattern "/" Replacement

CommandSubstitution <- "$(" CompoundCommand ")"
ArithmeticSubstitution <- "$((" ArithmeticExpression "))"

ArithmeticExpression <- Term (Addition / Subtraction Term)*
Addition           <- "+" Term
Subtraction        <- "-" Term

Term               <- Factor (Multiplication / Division Factor)*
Multiplication     <- "*" Factor
Division           <- "/" Factor

Factor             <- [0-9]+
                  / Substitution

Pattern            <- AnyChar*
Replacement        <- AnyChar*

Name               <- [a-zA-Z_][a-zA-Z_0-9]*

FD                <- [0-9]+
Delimiter         <- String

IfStatement       <-  IfPrefix __ ElifMidfix? __ ElseSuffix?  __ "fi"

ElseSuffix        <- "else" __ CompoundCommand*

ElifMidfix        <- "elif" _ List __ "then" __ CompoundCommand*

IfPrefix          <- "if" _ List __ "then" __ CompoundCommand*

WhileLoop         <- WhileLoopPrefix __ CompoundCommand __ "done"

WhileLoopPrefix   <- "while" _ List __ "do"

ForLoop           <- ForLoopPrefix __ WordList __ "do" __ CompoundCommand __ "done"

ForLoopPrefix     <- "for" _ Name _ "in"

WordList          <- Word ( _ ( "," | ";" )? _ Word _ )*

CaseStatement     <- CasePrefix __ CasePatternMultiple  __ "esac"

CasePrefix        <- "case" _ Word  _ "in"

CasePatternMultiple <- CasePatternSingle ( __ ";;" __ CasePatternMultiple )?

CasePatternSingle   <- PatternList ")" __ CompoundCommand __

PatternList       <- Word ( _ "|" _ Word )*

FunctionDefinition <- "function"?) _ Name _ "()" __ "{" CompoundCommand* "}"

VariableAssignment <- Name "=" Word

Comment           <- "#" AnyCharExceptNewline* "\n" { /* ignore */ }


TestExpr          <- "test" _ TestJunction
                  / "[" _ TestJunction _ "]"

TestJunction      <- TestTerm _ BinaryOperator _ TestTerm
                  / TestTerm

TestTerm          <- NormalTestTerm	     { STACK_PUSH_OPCODE(OPCODE_TEST_TERM_NORMAL); }
                  / NegatedTestTerm 	     { STACK_PUSH_OPCODE(OPCODE_TEST_TERM_NEGATE); }

NegatedTestTerm   <- "!" NormalTestTerm

NormalTestTerm    <- UnaryOperator Word

UnaryOperator     <- "-b"  { STACK_PUSH_OPCODE(OPCODE_TEST_IS_BLOCK); }
                  / "-c"   { STACK_PUSH_OPCODE(OPCODE_TEST_IS_CHAR); }
                  / "-d"   { STACK_PUSH_OPCODE(OPCODE_TEST_IS_DIRECTORY); } 
                  / "-e"   { STACK_PUSH_OPCODE(OPCODE_TEST_EXISTS); }
                  / "-f"   { STACK_PUSH_OPCODE(OPCODE_TEST_IS_REGULAR); }
                  / "-g"   { STACK_PUSH_OPCODE(OPCODE_TEST_IS_GROUPID_SET); }
                  / "-h"   { STACK_PUSH_OPCODE(OPCODE_TEST_IS_SYMLINK); }
                  / "-k"   { STACK_PUSH_OPCODE(OPCODE_TEST_IS_STICKY_SET); }
                  / "-p"   { STACK_PUSH_OPCODE(OPCODE_TEST_IS_NAMED_PIPE); }
                  / "-r"   { STACK_PUSH_OPCODE(OPCODE_TEST_IS_READABLE); }
                  / "-s"   { STACK_PUSH_OPCODE(OPCODE_TEST_IS_LARGER_ZERO); }
                  / "-t"   { STACK_PUSH_OPCODE(OPCODE_TEST_IS_TERMINAL);  }
                  / "-u"   { STACK_PUSH_OPCODE(OPCODE_TEST_IS_USERID_SET); }
                  / "-w"   { STACK_PUSH_OPCODE(OPCODE_TEST_IS_WRITABLE); } 
                  / "-x"   { STACK_PUSH_OPCODE(OPCODE_TEST_IS_EXECUTABLE); }
                  / "-z"   { STACK_PUSH_OPCODE(OPCODE_TEST_STR_EMPTY); }

BinaryOperator    <- "-eq" { STACK_PUSH_OPCODE(OPCODE_TEST_EQUALS); }
                  / "-ne" { STACK_PUSH_OPCODE(OPCODE_TEST_UNEQUALS); }
                  / "-lt" { STACK_PUSH_OPCODE(OPCODE_TEST_LESSER); }
                  / "-le" { STACK_PUSH_OPCODE(OPCODE_TEST_LESSER_EQUALS); }
                  / "-gt" { STACK_PUSH_OPCODE(OPCODE_TEST_GREATER);  }
                  / "-ge" { STACK_PUSH_OPCODE(OPCODE_TEST_GREATER_EQUALS); } 

AnyCharExceptNewlineAndSpace <- ![ \t\r\n]
AnyCharExceptSpace <- ![ \t]
AnyCharExceptNewline <- ![\n\r]

AnyChar           <- .

Eof               <- !.				

_                 <- [ \t]*
__                <- [ \t\r\n]*
o
