Program            <- Command* Eof

Command            <- SimpleCommand
                   / Pipeline
                   / IfStatement
		   / ElifStatement
                   / WhileLoop
                   / ForLoop
                   / CaseStatement
                   / FunctionDefinition
                   / VariableAssignment
                   / Comment
                   / Redirection
                   / CompoundCommand
                   / TestCommand

SimpleCommand      <- Word* Redirections?

Word               <- String
                   /  AnyCharExceptSpace
		   /  Substitution

GlobPattern       <- (Wildcard 
		   / CharacterClass 
		   / AnyCharGlob
		   / Escape
		  )+

Wildcard          <- "*"
CharacterClass    <- "[" (!"]" .)+ "]"
AnyCharGlob       <- "."
Escape            <- "\\" .

String             <- '"' ( AnyCharacter / Substitution )* '"'

Substitution      <- VariableSubstitution / CommandSubstitution / ArithmeticSubstitution

VariableSubstitution <- "$" (Name / ComplexVariable)

ComplexVariable   <- "{" VariableName "}"
VariableName      <- Name 
                  / Name ":" Alternative
		  / Name Alternative
		  / Name ":" GlobPattern 
		  / Name "#" RemoveSmallestSuffix 
		  / Name "##" RemoveLargestSuffix 
		  / Name "%" RemoveSmallestPrefix 
		  / Name "%%" RemoveLargestPrefix 
		  / Name "/" ReplaceFirst 
		  / Name "//" ReplaceAll

Alternative       <- "=" Pattern
	 	  / "+" Pattern
       		  / "-" Pattern
                  / "?" Pattern

RemoveSmallestSuffix <- "%" Pattern
RemoveLargestSuffix <- "%%" Pattern
RemoveSmallestPrefix <- "#" Pattern
RemoveLargestPrefix <- "##" Pattern
ReplaceFirst      <- "/" Pattern "/" Replacement
ReplaceAll        <- "//" Pattern "/" Replacement

CommandSubstitution <- "$(" CompoundCommand ")"
ArithmeticSubstitution <- "$((" ArithmeticExpression "))"

ArithmeticExpression <- Term (Addition / Subtraction Term)*
Addition          <- "+" Term
Subtraction       <- "-" Term

Term              <- Factor (Multiplication / Division Factor)*
Multiplication    <- "*" Factor
Division          <- "/" Factor

Factor            <- [0-9]+
 		  / Substitution

Pattern           <- AnyCharacter*
Replacement       <- AnyCharacter*

Name              <- [a-zA-Z_][a-zA-Z_0-9]*


Redirections       <- Redirection*

Redirection        <- InputRedirection
                   / OutputRedirection
                   / AppendOutputRedirection
                   / DuplicateOutputRedirection
		   / DuplicateInputRedirection
                   / HereDocument
                   / HereString

InputRedirection   <- FD? "<" Word
OutputRedirection  <- FD? ">" Word
AppendOutputRedirection <- FD? ">>" Word
DuplicateOutputRedirection <- FD? "&>" Word
DuplicateInputRedirection <- FD "<&" Word
HereDocument       <- FD? "<<" Delimiter
HereString         <- FD? "<<<" Word

FD                 <- [0-9]+
Delimiter          <- String

Pipeline           <- Command ("|" Command)*

IfStatement        <- "if" CompoundCommand "then" CompoundCommand ("else" CompoundCommand)? "fi"
                   / "if" CompoundCommand "then" CompoundCommand "fi"

ElifStatement      <- "elif" CompoundCommand "then" CompoundCommand

WhileLoop          <- "while" CompoundCommand "do" CompoundCommand "done"

ForLoop            <- "for" Name "in" WordList "do" CompoundCommand "done"

WordList           <- Word+

CaseStatement      <- "case" Word "in" ("(" PatternList ")" CompoundCommand ";;")* "esac"

PatternList        <- Word ("|" Word)*

FunctionDefinition <- "function"? Name "()" CompoundCommand

VariableAssignment <- Name "=" Word

Comment            <- "#" AnyCharacter*

CompoundCommand    <- "{"? Command* "}"?

TestCommand        <- "[" TestExpression "]"

TestExpression     <- TestTerm TestExpressionTail*

TestExpressionTail <- TestOperator TestTerm

TestTerm           <- UnaryTest
                   / "[" TestExpression "]"
                   / "!" TestExpression
                   / TestExpConjunction
                   / TestExpDisjunction
                   / "(" TestExpression ")"

TestExpConjunction <- "-a" TestTerm
TestExpDisjunction <- "-o" TestTerm

UnaryTest          <- UnaryOperator Word
                   / UnaryOperator "[" Word "]"
                   / UnaryOperator TestExpression

UnaryOperator      <- "-b" / "-c" / "-d" / "-e" / "-f" / "-g" / "-h" / "-k" / "-p" / "-r" / "-s" / "-t" / "-u" / "-w" / "-x" / "-z"

TestOperator       <- "=" / "!=" / "-eq" / "-ne" / "-lt" / "-le" / "-gt" / "-ge"

AnyCharExceptSpace <- ![ \t]

AnyCharacter       <- . 

Eof		   <- !.
