/* A recursive-descent parser generated by peg 0.1.18 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define YYRULECOUNT 68
#ifndef YY_MALLOC
#define YY_MALLOC(C, N)		malloc(N)
#endif
#ifndef YY_REALLOC
#define YY_REALLOC(C, P, N)	realloc(P, N)
#endif
#ifndef YY_FREE
#define YY_FREE(C, P)		free(P)
#endif
#ifndef YY_LOCAL
#define YY_LOCAL(T)	static T
#endif
#ifndef YY_ACTION
#define YY_ACTION(T)	static T
#endif
#ifndef YY_RULE
#define YY_RULE(T)	static T
#endif
#ifndef YY_PARSE
#define YY_PARSE(T)	T
#endif
#ifndef YYPARSE
#define YYPARSE		yyparse
#endif
#ifndef YYPARSEFROM
#define YYPARSEFROM	yyparsefrom
#endif
#ifndef YYRELEASE
#define YYRELEASE	yyrelease
#endif
#ifndef YY_BEGIN
#define YY_BEGIN	( yy->__begin= yy->__pos, 1)
#endif
#ifndef YY_END
#define YY_END		( yy->__end= yy->__pos, 1)
#endif
#ifdef YY_DEBUG
# define yyprintf(args)	fprintf args
#else
# define yyprintf(args)
#endif
#ifndef YYSTYPE
#define YYSTYPE	int
#endif
#ifndef YY_STACK_SIZE
#define YY_STACK_SIZE 128
#endif

#ifndef YY_BUFFER_SIZE
#define YY_BUFFER_SIZE 1024
#endif

#ifndef YY_PART

typedef struct _yycontext yycontext;
typedef void (*yyaction)(yycontext *yy, char *yytext, int yyleng);
typedef struct _yythunk { int begin, end;  yyaction  action;  struct _yythunk *next; } yythunk;

struct _yycontext {
  char     *__buf;
  int       __buflen;
  int       __pos;
  int       __limit;
  char     *__text;
  int       __textlen;
  int       __begin;
  int       __end;
  int       __textmax;
  yythunk  *__thunks;
  int       __thunkslen;
  int       __thunkpos;
  YYSTYPE   __;
  YYSTYPE  *__val;
  YYSTYPE  *__vals;
  int       __valslen;
#ifdef YY_CTX_MEMBERS
  YY_CTX_MEMBERS
#endif
};

#ifdef YY_CTX_LOCAL
#define YY_CTX_PARAM_	yycontext *yyctx,
#define YY_CTX_PARAM	yycontext *yyctx
#define YY_CTX_ARG_	yyctx,
#define YY_CTX_ARG	yyctx
#ifndef YY_INPUT
#define YY_INPUT(yy, buf, result, max_size)		\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#else
#define YY_CTX_PARAM_
#define YY_CTX_PARAM
#define YY_CTX_ARG_
#define YY_CTX_ARG
yycontext _yyctx= { 0, 0 };
yycontext *yyctx= &_yyctx;
#ifndef YY_INPUT
#define YY_INPUT(buf, result, max_size)			\
  {							\
    int yyc= getchar();					\
    result= (EOF == yyc) ? 0 : (*(buf)= yyc, 1);	\
    yyprintf((stderr, "<%c>", yyc));			\
  }
#endif
#endif

YY_LOCAL(int) yyrefill(yycontext *yy)
{
  int yyn;
  while (yy->__buflen - yy->__pos < 512)
    {
      yy->__buflen *= 2;
      yy->__buf= (char *)YY_REALLOC(yy, yy->__buf, yy->__buflen);
    }
#ifdef YY_CTX_LOCAL
  YY_INPUT(yy, (yy->__buf + yy->__pos), yyn, (yy->__buflen - yy->__pos));
#else
  YY_INPUT((yy->__buf + yy->__pos), yyn, (yy->__buflen - yy->__pos));
#endif
  if (!yyn) return 0;
  yy->__limit += yyn;
  return 1;
}

YY_LOCAL(int) yymatchDot(yycontext *yy)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  ++yy->__pos;
  return 1;
}

YY_LOCAL(int) yymatchChar(yycontext *yy, int c)
{
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  if ((unsigned char)yy->__buf[yy->__pos] == c)
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchChar(yy, %c) @ %s\n", c, yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchChar(yy, %c) @ %s\n", c, yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(int) yymatchString(yycontext *yy, const char *s)
{
  int yysav= yy->__pos;
  while (*s)
    {
      if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
      if (yy->__buf[yy->__pos] != *s)
        {
          yy->__pos= yysav;
          return 0;
        }
      ++s;
      ++yy->__pos;
    }
  return 1;
}

YY_LOCAL(int) yymatchClass(yycontext *yy, unsigned char *bits)
{
  int c;
  if (yy->__pos >= yy->__limit && !yyrefill(yy)) return 0;
  c= (unsigned char)yy->__buf[yy->__pos];
  if (bits[c >> 3] & (1 << (c & 7)))
    {
      ++yy->__pos;
      yyprintf((stderr, "  ok   yymatchClass @ %s\n", yy->__buf+yy->__pos));
      return 1;
    }
  yyprintf((stderr, "  fail yymatchClass @ %s\n", yy->__buf+yy->__pos));
  return 0;
}

YY_LOCAL(void) yyDo(yycontext *yy, yyaction action, int begin, int end)
{
  while (yy->__thunkpos >= yy->__thunkslen)
    {
      yy->__thunkslen *= 2;
      yy->__thunks= (yythunk *)YY_REALLOC(yy, yy->__thunks, sizeof(yythunk) * yy->__thunkslen);
    }
  yy->__thunks[yy->__thunkpos].begin=  begin;
  yy->__thunks[yy->__thunkpos].end=    end;
  yy->__thunks[yy->__thunkpos].action= action;
  ++yy->__thunkpos;
}

YY_LOCAL(int) yyText(yycontext *yy, int begin, int end)
{
  int yyleng= end - begin;
  if (yyleng <= 0)
    yyleng= 0;
  else
    {
      while (yy->__textlen < (yyleng + 1))
	{
	  yy->__textlen *= 2;
	  yy->__text= (char *)YY_REALLOC(yy, yy->__text, yy->__textlen);
	}
      memcpy(yy->__text, yy->__buf + begin, yyleng);
    }
  yy->__text[yyleng]= '\0';
  return yyleng;
}

YY_LOCAL(void) yyDone(yycontext *yy)
{
  int pos;
  for (pos= 0;  pos < yy->__thunkpos;  ++pos)
    {
      yythunk *thunk= &yy->__thunks[pos];
      int yyleng= thunk->end ? yyText(yy, thunk->begin, thunk->end) : thunk->begin;
      yyprintf((stderr, "DO [%d] %p %s\n", pos, thunk->action, yy->__text));
      thunk->action(yy, yy->__text, yyleng);
    }
  yy->__thunkpos= 0;
}

YY_LOCAL(void) yyCommit(yycontext *yy)
{
  if ((yy->__limit -= yy->__pos))
    {
      memmove(yy->__buf, yy->__buf + yy->__pos, yy->__limit);
    }
  yy->__begin -= yy->__pos;
  yy->__end -= yy->__pos;
  yy->__pos= yy->__thunkpos= 0;
}

YY_LOCAL(int) yyAccept(yycontext *yy, int tp0)
{
  if (tp0)
    {
      fprintf(stderr, "accept denied at %d\n", tp0);
      return 0;
    }
  else
    {
      yyDone(yy);
      yyCommit(yy);
    }
  return 1;
}

YY_LOCAL(void) yyPush(yycontext *yy, char *text, int count)
{
  yy->__val += count;
  while (yy->__valslen <= yy->__val - yy->__vals)
    {
      long offset= yy->__val - yy->__vals;
      yy->__valslen *= 2;
      yy->__vals= (YYSTYPE *)YY_REALLOC(yy, yy->__vals, sizeof(YYSTYPE) * yy->__valslen);
      yy->__val= yy->__vals + offset;
    }
}
YY_LOCAL(void) yyPop(yycontext *yy, char *text, int count)   { yy->__val -= count; }
YY_LOCAL(void) yySet(yycontext *yy, char *text, int count)   { yy->__val[count]= yy->__; }

#endif /* YY_PART */

#define	YYACCEPT	yyAccept(yy, yythunkpos0)

YY_RULE(int) yy_UnaryOperator(yycontext *yy); /* 68 */
YY_RULE(int) yy_TestExpDisjunction(yycontext *yy); /* 67 */
YY_RULE(int) yy_TestExpConjunction(yycontext *yy); /* 66 */
YY_RULE(int) yy_UnaryTest(yycontext *yy); /* 65 */
YY_RULE(int) yy_TestOperator(yycontext *yy); /* 64 */
YY_RULE(int) yy_TestExpressionTail(yycontext *yy); /* 63 */
YY_RULE(int) yy_TestTerm(yycontext *yy); /* 62 */
YY_RULE(int) yy_TestExpression(yycontext *yy); /* 61 */
YY_RULE(int) yy_PatternList(yycontext *yy); /* 60 */
YY_RULE(int) yy_WordList(yycontext *yy); /* 59 */
YY_RULE(int) yy_Delimiter(yycontext *yy); /* 58 */
YY_RULE(int) yy_FD(yycontext *yy); /* 57 */
YY_RULE(int) yy_HereString(yycontext *yy); /* 56 */
YY_RULE(int) yy_HereDocument(yycontext *yy); /* 55 */
YY_RULE(int) yy_DuplicateInputRedirection(yycontext *yy); /* 54 */
YY_RULE(int) yy_DuplicateOutputRedirection(yycontext *yy); /* 53 */
YY_RULE(int) yy_AppendOutputRedirection(yycontext *yy); /* 52 */
YY_RULE(int) yy_OutputRedirection(yycontext *yy); /* 51 */
YY_RULE(int) yy_InputRedirection(yycontext *yy); /* 50 */
YY_RULE(int) yy_Division(yycontext *yy); /* 49 */
YY_RULE(int) yy_Multiplication(yycontext *yy); /* 48 */
YY_RULE(int) yy_Factor(yycontext *yy); /* 47 */
YY_RULE(int) yy_Subtraction(yycontext *yy); /* 46 */
YY_RULE(int) yy_Addition(yycontext *yy); /* 45 */
YY_RULE(int) yy_Term(yycontext *yy); /* 44 */
YY_RULE(int) yy_ArithmeticExpression(yycontext *yy); /* 43 */
YY_RULE(int) yy_Replacement(yycontext *yy); /* 42 */
YY_RULE(int) yy_Pattern(yycontext *yy); /* 41 */
YY_RULE(int) yy_ReplaceAll(yycontext *yy); /* 40 */
YY_RULE(int) yy_ReplaceFirst(yycontext *yy); /* 39 */
YY_RULE(int) yy_RemoveLargestPrefix(yycontext *yy); /* 38 */
YY_RULE(int) yy_RemoveSmallestPrefix(yycontext *yy); /* 37 */
YY_RULE(int) yy_RemoveLargestSuffix(yycontext *yy); /* 36 */
YY_RULE(int) yy_RemoveSmallestSuffix(yycontext *yy); /* 35 */
YY_RULE(int) yy_Alternative(yycontext *yy); /* 34 */
YY_RULE(int) yy_VariableName(yycontext *yy); /* 33 */
YY_RULE(int) yy_ComplexVariable(yycontext *yy); /* 32 */
YY_RULE(int) yy_Name(yycontext *yy); /* 31 */
YY_RULE(int) yy_ArithmeticSubstitution(yycontext *yy); /* 30 */
YY_RULE(int) yy_CommandSubstitution(yycontext *yy); /* 29 */
YY_RULE(int) yy_VariableSubstitution(yycontext *yy); /* 28 */
YY_RULE(int) yy_AnyCharacter(yycontext *yy); /* 27 */
YY_RULE(int) yy_Escape(yycontext *yy); /* 26 */
YY_RULE(int) yy_AnyCharGlob(yycontext *yy); /* 25 */
YY_RULE(int) yy_CharacterClass(yycontext *yy); /* 24 */
YY_RULE(int) yy_Wildcard(yycontext *yy); /* 23 */
YY_RULE(int) yy_GlobPattern(yycontext *yy); /* 22 */
YY_RULE(int) yy_Substitution(yycontext *yy); /* 21 */
YY_RULE(int) yy_AnyCharExceptSpace(yycontext *yy); /* 20 */
YY_RULE(int) yy_String(yycontext *yy); /* 19 */
YY_RULE(int) yy_Redirections(yycontext *yy); /* 18 */
YY_RULE(int) yy_Word(yycontext *yy); /* 17 */
YY_RULE(int) yy_TestCommand(yycontext *yy); /* 16 */
YY_RULE(int) yy_CompoundCommand(yycontext *yy); /* 15 */
YY_RULE(int) yy_Redirection(yycontext *yy); /* 14 */
YY_RULE(int) yy_Comment(yycontext *yy); /* 13 */
YY_RULE(int) yy_VariableAssignment(yycontext *yy); /* 12 */
YY_RULE(int) yy_FunctionDefinition(yycontext *yy); /* 11 */
YY_RULE(int) yy_CaseStatement(yycontext *yy); /* 10 */
YY_RULE(int) yy_ForLoop(yycontext *yy); /* 9 */
YY_RULE(int) yy_WhileLoop(yycontext *yy); /* 8 */
YY_RULE(int) yy_ElifStatement(yycontext *yy); /* 7 */
YY_RULE(int) yy_IfStatement(yycontext *yy); /* 6 */
YY_RULE(int) yy_Pipeline(yycontext *yy); /* 5 */
YY_RULE(int) yy_SimpleCommand(yycontext *yy); /* 4 */
YY_RULE(int) yy_Eof(yycontext *yy); /* 3 */
YY_RULE(int) yy_Command(yycontext *yy); /* 2 */
YY_RULE(int) yy_Program(yycontext *yy); /* 1 */


YY_RULE(int) yy_UnaryOperator(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "UnaryOperator"));
  {  int yypos2= yy->__pos, yythunkpos2= yy->__thunkpos;  if (!yymatchString(yy, "-b")) goto l3;  goto l2;
  l3:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;  if (!yymatchString(yy, "-c")) goto l4;  goto l2;
  l4:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;  if (!yymatchString(yy, "-d")) goto l5;  goto l2;
  l5:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;  if (!yymatchString(yy, "-e")) goto l6;  goto l2;
  l6:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;  if (!yymatchString(yy, "-f")) goto l7;  goto l2;
  l7:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;  if (!yymatchString(yy, "-g")) goto l8;  goto l2;
  l8:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;  if (!yymatchString(yy, "-h")) goto l9;  goto l2;
  l9:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;  if (!yymatchString(yy, "-k")) goto l10;  goto l2;
  l10:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;  if (!yymatchString(yy, "-p")) goto l11;  goto l2;
  l11:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;  if (!yymatchString(yy, "-r")) goto l12;  goto l2;
  l12:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;  if (!yymatchString(yy, "-s")) goto l13;  goto l2;
  l13:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;  if (!yymatchString(yy, "-t")) goto l14;  goto l2;
  l14:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;  if (!yymatchString(yy, "-u")) goto l15;  goto l2;
  l15:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;  if (!yymatchString(yy, "-w")) goto l16;  goto l2;
  l16:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;  if (!yymatchString(yy, "-x")) goto l17;  goto l2;
  l17:;	  yy->__pos= yypos2; yy->__thunkpos= yythunkpos2;  if (!yymatchString(yy, "-z")) goto l1;
  }
  l2:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "UnaryOperator", yy->__buf+yy->__pos));
  return 1;
  l1:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "UnaryOperator", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_TestExpDisjunction(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "TestExpDisjunction"));  if (!yymatchString(yy, "-o")) goto l18;  if (!yy_TestTerm(yy)) goto l18;
  yyprintf((stderr, "  ok   %s @ %s\n", "TestExpDisjunction", yy->__buf+yy->__pos));
  return 1;
  l18:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TestExpDisjunction", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_TestExpConjunction(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "TestExpConjunction"));  if (!yymatchString(yy, "-a")) goto l19;  if (!yy_TestTerm(yy)) goto l19;
  yyprintf((stderr, "  ok   %s @ %s\n", "TestExpConjunction", yy->__buf+yy->__pos));
  return 1;
  l19:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TestExpConjunction", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_UnaryTest(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "UnaryTest"));
  {  int yypos21= yy->__pos, yythunkpos21= yy->__thunkpos;  if (!yy_UnaryOperator(yy)) goto l22;  if (!yy_Word(yy)) goto l22;  goto l21;
  l22:;	  yy->__pos= yypos21; yy->__thunkpos= yythunkpos21;  if (!yy_UnaryOperator(yy)) goto l23;  if (!yymatchChar(yy, '[')) goto l23;  if (!yy_Word(yy)) goto l23;  if (!yymatchChar(yy, ']')) goto l23;  goto l21;
  l23:;	  yy->__pos= yypos21; yy->__thunkpos= yythunkpos21;  if (!yy_UnaryOperator(yy)) goto l20;  if (!yy_TestExpression(yy)) goto l20;
  }
  l21:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "UnaryTest", yy->__buf+yy->__pos));
  return 1;
  l20:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "UnaryTest", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_TestOperator(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "TestOperator"));
  {  int yypos25= yy->__pos, yythunkpos25= yy->__thunkpos;  if (!yymatchChar(yy, '=')) goto l26;  goto l25;
  l26:;	  yy->__pos= yypos25; yy->__thunkpos= yythunkpos25;  if (!yymatchString(yy, "!=")) goto l27;  goto l25;
  l27:;	  yy->__pos= yypos25; yy->__thunkpos= yythunkpos25;  if (!yymatchString(yy, "-eq")) goto l28;  goto l25;
  l28:;	  yy->__pos= yypos25; yy->__thunkpos= yythunkpos25;  if (!yymatchString(yy, "-ne")) goto l29;  goto l25;
  l29:;	  yy->__pos= yypos25; yy->__thunkpos= yythunkpos25;  if (!yymatchString(yy, "-lt")) goto l30;  goto l25;
  l30:;	  yy->__pos= yypos25; yy->__thunkpos= yythunkpos25;  if (!yymatchString(yy, "-le")) goto l31;  goto l25;
  l31:;	  yy->__pos= yypos25; yy->__thunkpos= yythunkpos25;  if (!yymatchString(yy, "-gt")) goto l32;  goto l25;
  l32:;	  yy->__pos= yypos25; yy->__thunkpos= yythunkpos25;  if (!yymatchString(yy, "-ge")) goto l24;
  }
  l25:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "TestOperator", yy->__buf+yy->__pos));
  return 1;
  l24:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TestOperator", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_TestExpressionTail(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "TestExpressionTail"));  if (!yy_TestOperator(yy)) goto l33;  if (!yy_TestTerm(yy)) goto l33;
  yyprintf((stderr, "  ok   %s @ %s\n", "TestExpressionTail", yy->__buf+yy->__pos));
  return 1;
  l33:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TestExpressionTail", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_TestTerm(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "TestTerm"));
  {  int yypos35= yy->__pos, yythunkpos35= yy->__thunkpos;  if (!yy_UnaryTest(yy)) goto l36;  goto l35;
  l36:;	  yy->__pos= yypos35; yy->__thunkpos= yythunkpos35;  if (!yymatchChar(yy, '[')) goto l37;  if (!yy_TestExpression(yy)) goto l37;  if (!yymatchChar(yy, ']')) goto l37;  goto l35;
  l37:;	  yy->__pos= yypos35; yy->__thunkpos= yythunkpos35;  if (!yymatchChar(yy, '!')) goto l38;  if (!yy_TestExpression(yy)) goto l38;  goto l35;
  l38:;	  yy->__pos= yypos35; yy->__thunkpos= yythunkpos35;  if (!yy_TestExpConjunction(yy)) goto l39;  goto l35;
  l39:;	  yy->__pos= yypos35; yy->__thunkpos= yythunkpos35;  if (!yy_TestExpDisjunction(yy)) goto l40;  goto l35;
  l40:;	  yy->__pos= yypos35; yy->__thunkpos= yythunkpos35;  if (!yymatchChar(yy, '(')) goto l34;  if (!yy_TestExpression(yy)) goto l34;  if (!yymatchChar(yy, ')')) goto l34;
  }
  l35:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "TestTerm", yy->__buf+yy->__pos));
  return 1;
  l34:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TestTerm", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_TestExpression(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "TestExpression"));  if (!yy_TestTerm(yy)) goto l41;
  l42:;	
  {  int yypos43= yy->__pos, yythunkpos43= yy->__thunkpos;  if (!yy_TestExpressionTail(yy)) goto l43;  goto l42;
  l43:;	  yy->__pos= yypos43; yy->__thunkpos= yythunkpos43;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "TestExpression", yy->__buf+yy->__pos));
  return 1;
  l41:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TestExpression", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_PatternList(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "PatternList"));  if (!yy_Word(yy)) goto l44;
  l45:;	
  {  int yypos46= yy->__pos, yythunkpos46= yy->__thunkpos;  if (!yymatchChar(yy, '|')) goto l46;  if (!yy_Word(yy)) goto l46;  goto l45;
  l46:;	  yy->__pos= yypos46; yy->__thunkpos= yythunkpos46;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "PatternList", yy->__buf+yy->__pos));
  return 1;
  l44:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "PatternList", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_WordList(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "WordList"));  if (!yy_Word(yy)) goto l47;
  l48:;	
  {  int yypos49= yy->__pos, yythunkpos49= yy->__thunkpos;  if (!yy_Word(yy)) goto l49;  goto l48;
  l49:;	  yy->__pos= yypos49; yy->__thunkpos= yythunkpos49;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "WordList", yy->__buf+yy->__pos));
  return 1;
  l47:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "WordList", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Delimiter(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Delimiter"));  if (!yy_String(yy)) goto l50;
  yyprintf((stderr, "  ok   %s @ %s\n", "Delimiter", yy->__buf+yy->__pos));
  return 1;
  l50:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Delimiter", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_FD(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "FD"));  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l51;
  l52:;	
  {  int yypos53= yy->__pos, yythunkpos53= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l53;  goto l52;
  l53:;	  yy->__pos= yypos53; yy->__thunkpos= yythunkpos53;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "FD", yy->__buf+yy->__pos));
  return 1;
  l51:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FD", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_HereString(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "HereString"));
  {  int yypos55= yy->__pos, yythunkpos55= yy->__thunkpos;  if (!yy_FD(yy)) goto l55;  goto l56;
  l55:;	  yy->__pos= yypos55; yy->__thunkpos= yythunkpos55;
  }
  l56:;	  if (!yymatchString(yy, "<<<")) goto l54;  if (!yy_Word(yy)) goto l54;
  yyprintf((stderr, "  ok   %s @ %s\n", "HereString", yy->__buf+yy->__pos));
  return 1;
  l54:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "HereString", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_HereDocument(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "HereDocument"));
  {  int yypos58= yy->__pos, yythunkpos58= yy->__thunkpos;  if (!yy_FD(yy)) goto l58;  goto l59;
  l58:;	  yy->__pos= yypos58; yy->__thunkpos= yythunkpos58;
  }
  l59:;	  if (!yymatchString(yy, "<<")) goto l57;  if (!yy_Delimiter(yy)) goto l57;
  yyprintf((stderr, "  ok   %s @ %s\n", "HereDocument", yy->__buf+yy->__pos));
  return 1;
  l57:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "HereDocument", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_DuplicateInputRedirection(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "DuplicateInputRedirection"));  if (!yy_FD(yy)) goto l60;  if (!yymatchString(yy, "<&")) goto l60;  if (!yy_Word(yy)) goto l60;
  yyprintf((stderr, "  ok   %s @ %s\n", "DuplicateInputRedirection", yy->__buf+yy->__pos));
  return 1;
  l60:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "DuplicateInputRedirection", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_DuplicateOutputRedirection(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "DuplicateOutputRedirection"));
  {  int yypos62= yy->__pos, yythunkpos62= yy->__thunkpos;  if (!yy_FD(yy)) goto l62;  goto l63;
  l62:;	  yy->__pos= yypos62; yy->__thunkpos= yythunkpos62;
  }
  l63:;	  if (!yymatchString(yy, "&>")) goto l61;  if (!yy_Word(yy)) goto l61;
  yyprintf((stderr, "  ok   %s @ %s\n", "DuplicateOutputRedirection", yy->__buf+yy->__pos));
  return 1;
  l61:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "DuplicateOutputRedirection", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_AppendOutputRedirection(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "AppendOutputRedirection"));
  {  int yypos65= yy->__pos, yythunkpos65= yy->__thunkpos;  if (!yy_FD(yy)) goto l65;  goto l66;
  l65:;	  yy->__pos= yypos65; yy->__thunkpos= yythunkpos65;
  }
  l66:;	  if (!yymatchString(yy, ">>")) goto l64;  if (!yy_Word(yy)) goto l64;
  yyprintf((stderr, "  ok   %s @ %s\n", "AppendOutputRedirection", yy->__buf+yy->__pos));
  return 1;
  l64:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "AppendOutputRedirection", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_OutputRedirection(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "OutputRedirection"));
  {  int yypos68= yy->__pos, yythunkpos68= yy->__thunkpos;  if (!yy_FD(yy)) goto l68;  goto l69;
  l68:;	  yy->__pos= yypos68; yy->__thunkpos= yythunkpos68;
  }
  l69:;	  if (!yymatchChar(yy, '>')) goto l67;  if (!yy_Word(yy)) goto l67;
  yyprintf((stderr, "  ok   %s @ %s\n", "OutputRedirection", yy->__buf+yy->__pos));
  return 1;
  l67:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "OutputRedirection", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_InputRedirection(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "InputRedirection"));
  {  int yypos71= yy->__pos, yythunkpos71= yy->__thunkpos;  if (!yy_FD(yy)) goto l71;  goto l72;
  l71:;	  yy->__pos= yypos71; yy->__thunkpos= yythunkpos71;
  }
  l72:;	  if (!yymatchChar(yy, '<')) goto l70;  if (!yy_Word(yy)) goto l70;
  yyprintf((stderr, "  ok   %s @ %s\n", "InputRedirection", yy->__buf+yy->__pos));
  return 1;
  l70:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "InputRedirection", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Division(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Division"));  if (!yymatchChar(yy, '/')) goto l73;  if (!yy_Factor(yy)) goto l73;
  yyprintf((stderr, "  ok   %s @ %s\n", "Division", yy->__buf+yy->__pos));
  return 1;
  l73:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Division", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Multiplication(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Multiplication"));  if (!yymatchChar(yy, '*')) goto l74;  if (!yy_Factor(yy)) goto l74;
  yyprintf((stderr, "  ok   %s @ %s\n", "Multiplication", yy->__buf+yy->__pos));
  return 1;
  l74:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Multiplication", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Factor(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Factor"));
  {  int yypos76= yy->__pos, yythunkpos76= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l77;
  l78:;	
  {  int yypos79= yy->__pos, yythunkpos79= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l79;  goto l78;
  l79:;	  yy->__pos= yypos79; yy->__thunkpos= yythunkpos79;
  }  goto l76;
  l77:;	  yy->__pos= yypos76; yy->__thunkpos= yythunkpos76;  if (!yy_Substitution(yy)) goto l75;
  }
  l76:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Factor", yy->__buf+yy->__pos));
  return 1;
  l75:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Factor", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Subtraction(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Subtraction"));  if (!yymatchChar(yy, '-')) goto l80;  if (!yy_Term(yy)) goto l80;
  yyprintf((stderr, "  ok   %s @ %s\n", "Subtraction", yy->__buf+yy->__pos));
  return 1;
  l80:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Subtraction", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Addition(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Addition"));  if (!yymatchChar(yy, '+')) goto l81;  if (!yy_Term(yy)) goto l81;
  yyprintf((stderr, "  ok   %s @ %s\n", "Addition", yy->__buf+yy->__pos));
  return 1;
  l81:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Addition", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Term(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Term"));  if (!yy_Factor(yy)) goto l82;
  l83:;	
  {  int yypos84= yy->__pos, yythunkpos84= yy->__thunkpos;
  {  int yypos85= yy->__pos, yythunkpos85= yy->__thunkpos;  if (!yy_Multiplication(yy)) goto l86;  goto l85;
  l86:;	  yy->__pos= yypos85; yy->__thunkpos= yythunkpos85;  if (!yy_Division(yy)) goto l84;  if (!yy_Factor(yy)) goto l84;
  }
  l85:;	  goto l83;
  l84:;	  yy->__pos= yypos84; yy->__thunkpos= yythunkpos84;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Term", yy->__buf+yy->__pos));
  return 1;
  l82:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Term", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_ArithmeticExpression(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "ArithmeticExpression"));  if (!yy_Term(yy)) goto l87;
  l88:;	
  {  int yypos89= yy->__pos, yythunkpos89= yy->__thunkpos;
  {  int yypos90= yy->__pos, yythunkpos90= yy->__thunkpos;  if (!yy_Addition(yy)) goto l91;  goto l90;
  l91:;	  yy->__pos= yypos90; yy->__thunkpos= yythunkpos90;  if (!yy_Subtraction(yy)) goto l89;  if (!yy_Term(yy)) goto l89;
  }
  l90:;	  goto l88;
  l89:;	  yy->__pos= yypos89; yy->__thunkpos= yythunkpos89;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "ArithmeticExpression", yy->__buf+yy->__pos));
  return 1;
  l87:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "ArithmeticExpression", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Replacement(yycontext *yy)
{
  yyprintf((stderr, "%s\n", "Replacement"));
  l93:;	
  {  int yypos94= yy->__pos, yythunkpos94= yy->__thunkpos;  if (!yy_AnyCharacter(yy)) goto l94;  goto l93;
  l94:;	  yy->__pos= yypos94; yy->__thunkpos= yythunkpos94;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Replacement", yy->__buf+yy->__pos));
  return 1;
}
YY_RULE(int) yy_Pattern(yycontext *yy)
{
  yyprintf((stderr, "%s\n", "Pattern"));
  l96:;	
  {  int yypos97= yy->__pos, yythunkpos97= yy->__thunkpos;  if (!yy_AnyCharacter(yy)) goto l97;  goto l96;
  l97:;	  yy->__pos= yypos97; yy->__thunkpos= yythunkpos97;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Pattern", yy->__buf+yy->__pos));
  return 1;
}
YY_RULE(int) yy_ReplaceAll(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "ReplaceAll"));  if (!yymatchString(yy, "//")) goto l98;  if (!yy_Pattern(yy)) goto l98;  if (!yymatchChar(yy, '/')) goto l98;  if (!yy_Replacement(yy)) goto l98;
  yyprintf((stderr, "  ok   %s @ %s\n", "ReplaceAll", yy->__buf+yy->__pos));
  return 1;
  l98:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "ReplaceAll", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_ReplaceFirst(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "ReplaceFirst"));  if (!yymatchChar(yy, '/')) goto l99;  if (!yy_Pattern(yy)) goto l99;  if (!yymatchChar(yy, '/')) goto l99;  if (!yy_Replacement(yy)) goto l99;
  yyprintf((stderr, "  ok   %s @ %s\n", "ReplaceFirst", yy->__buf+yy->__pos));
  return 1;
  l99:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "ReplaceFirst", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_RemoveLargestPrefix(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "RemoveLargestPrefix"));  if (!yymatchString(yy, "##")) goto l100;  if (!yy_Pattern(yy)) goto l100;
  yyprintf((stderr, "  ok   %s @ %s\n", "RemoveLargestPrefix", yy->__buf+yy->__pos));
  return 1;
  l100:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "RemoveLargestPrefix", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_RemoveSmallestPrefix(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "RemoveSmallestPrefix"));  if (!yymatchChar(yy, '#')) goto l101;  if (!yy_Pattern(yy)) goto l101;
  yyprintf((stderr, "  ok   %s @ %s\n", "RemoveSmallestPrefix", yy->__buf+yy->__pos));
  return 1;
  l101:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "RemoveSmallestPrefix", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_RemoveLargestSuffix(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "RemoveLargestSuffix"));  if (!yymatchString(yy, "%%")) goto l102;  if (!yy_Pattern(yy)) goto l102;
  yyprintf((stderr, "  ok   %s @ %s\n", "RemoveLargestSuffix", yy->__buf+yy->__pos));
  return 1;
  l102:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "RemoveLargestSuffix", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_RemoveSmallestSuffix(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "RemoveSmallestSuffix"));  if (!yymatchChar(yy, '%')) goto l103;  if (!yy_Pattern(yy)) goto l103;
  yyprintf((stderr, "  ok   %s @ %s\n", "RemoveSmallestSuffix", yy->__buf+yy->__pos));
  return 1;
  l103:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "RemoveSmallestSuffix", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Alternative(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Alternative"));
  {  int yypos105= yy->__pos, yythunkpos105= yy->__thunkpos;  if (!yymatchChar(yy, '=')) goto l106;  if (!yy_Pattern(yy)) goto l106;  goto l105;
  l106:;	  yy->__pos= yypos105; yy->__thunkpos= yythunkpos105;  if (!yymatchChar(yy, '+')) goto l107;  if (!yy_Pattern(yy)) goto l107;  goto l105;
  l107:;	  yy->__pos= yypos105; yy->__thunkpos= yythunkpos105;  if (!yymatchChar(yy, '-')) goto l108;  if (!yy_Pattern(yy)) goto l108;  goto l105;
  l108:;	  yy->__pos= yypos105; yy->__thunkpos= yythunkpos105;  if (!yymatchChar(yy, '?')) goto l104;  if (!yy_Pattern(yy)) goto l104;
  }
  l105:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Alternative", yy->__buf+yy->__pos));
  return 1;
  l104:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Alternative", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_VariableName(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "VariableName"));
  {  int yypos110= yy->__pos, yythunkpos110= yy->__thunkpos;  if (!yy_Name(yy)) goto l111;  goto l110;
  l111:;	  yy->__pos= yypos110; yy->__thunkpos= yythunkpos110;  if (!yy_Name(yy)) goto l112;  if (!yymatchChar(yy, ':')) goto l112;  if (!yy_Alternative(yy)) goto l112;  goto l110;
  l112:;	  yy->__pos= yypos110; yy->__thunkpos= yythunkpos110;  if (!yy_Name(yy)) goto l113;  if (!yy_Alternative(yy)) goto l113;  goto l110;
  l113:;	  yy->__pos= yypos110; yy->__thunkpos= yythunkpos110;  if (!yy_Name(yy)) goto l114;  if (!yymatchChar(yy, ':')) goto l114;  if (!yy_GlobPattern(yy)) goto l114;  goto l110;
  l114:;	  yy->__pos= yypos110; yy->__thunkpos= yythunkpos110;  if (!yy_Name(yy)) goto l115;  if (!yymatchChar(yy, '#')) goto l115;  if (!yy_RemoveSmallestSuffix(yy)) goto l115;  goto l110;
  l115:;	  yy->__pos= yypos110; yy->__thunkpos= yythunkpos110;  if (!yy_Name(yy)) goto l116;  if (!yymatchString(yy, "##")) goto l116;  if (!yy_RemoveLargestSuffix(yy)) goto l116;  goto l110;
  l116:;	  yy->__pos= yypos110; yy->__thunkpos= yythunkpos110;  if (!yy_Name(yy)) goto l117;  if (!yymatchChar(yy, '%')) goto l117;  if (!yy_RemoveSmallestPrefix(yy)) goto l117;  goto l110;
  l117:;	  yy->__pos= yypos110; yy->__thunkpos= yythunkpos110;  if (!yy_Name(yy)) goto l118;  if (!yymatchString(yy, "%%")) goto l118;  if (!yy_RemoveLargestPrefix(yy)) goto l118;  goto l110;
  l118:;	  yy->__pos= yypos110; yy->__thunkpos= yythunkpos110;  if (!yy_Name(yy)) goto l119;  if (!yymatchChar(yy, '/')) goto l119;  if (!yy_ReplaceFirst(yy)) goto l119;  goto l110;
  l119:;	  yy->__pos= yypos110; yy->__thunkpos= yythunkpos110;  if (!yy_Name(yy)) goto l109;  if (!yymatchString(yy, "//")) goto l109;  if (!yy_ReplaceAll(yy)) goto l109;
  }
  l110:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "VariableName", yy->__buf+yy->__pos));
  return 1;
  l109:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "VariableName", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_ComplexVariable(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "ComplexVariable"));  if (!yymatchChar(yy, '{')) goto l120;  if (!yy_VariableName(yy)) goto l120;  if (!yymatchChar(yy, '}')) goto l120;
  yyprintf((stderr, "  ok   %s @ %s\n", "ComplexVariable", yy->__buf+yy->__pos));
  return 1;
  l120:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "ComplexVariable", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Name(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Name"));  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\000\000\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l121;
  l122:;	
  {  int yypos123= yy->__pos, yythunkpos123= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\000\000\000\000\000\377\003\376\377\377\207\376\377\377\007\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l123;  goto l122;
  l123:;	  yy->__pos= yypos123; yy->__thunkpos= yythunkpos123;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Name", yy->__buf+yy->__pos));
  return 1;
  l121:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Name", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_ArithmeticSubstitution(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "ArithmeticSubstitution"));  if (!yymatchString(yy, "$((")) goto l124;  if (!yy_ArithmeticExpression(yy)) goto l124;  if (!yymatchString(yy, "))")) goto l124;
  yyprintf((stderr, "  ok   %s @ %s\n", "ArithmeticSubstitution", yy->__buf+yy->__pos));
  return 1;
  l124:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "ArithmeticSubstitution", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CommandSubstitution(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CommandSubstitution"));  if (!yymatchString(yy, "$(")) goto l125;  if (!yy_CompoundCommand(yy)) goto l125;  if (!yymatchChar(yy, ')')) goto l125;
  yyprintf((stderr, "  ok   %s @ %s\n", "CommandSubstitution", yy->__buf+yy->__pos));
  return 1;
  l125:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CommandSubstitution", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_VariableSubstitution(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "VariableSubstitution"));  if (!yymatchChar(yy, '$')) goto l126;
  {  int yypos127= yy->__pos, yythunkpos127= yy->__thunkpos;  if (!yy_Name(yy)) goto l128;  goto l127;
  l128:;	  yy->__pos= yypos127; yy->__thunkpos= yythunkpos127;  if (!yy_ComplexVariable(yy)) goto l126;
  }
  l127:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "VariableSubstitution", yy->__buf+yy->__pos));
  return 1;
  l126:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "VariableSubstitution", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_AnyCharacter(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "AnyCharacter"));  if (!yymatchDot(yy)) goto l129;
  yyprintf((stderr, "  ok   %s @ %s\n", "AnyCharacter", yy->__buf+yy->__pos));
  return 1;
  l129:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "AnyCharacter", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Escape(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Escape"));  if (!yymatchChar(yy, '\\')) goto l130;  if (!yymatchDot(yy)) goto l130;
  yyprintf((stderr, "  ok   %s @ %s\n", "Escape", yy->__buf+yy->__pos));
  return 1;
  l130:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Escape", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_AnyCharGlob(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "AnyCharGlob"));  if (!yymatchChar(yy, '.')) goto l131;
  yyprintf((stderr, "  ok   %s @ %s\n", "AnyCharGlob", yy->__buf+yy->__pos));
  return 1;
  l131:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "AnyCharGlob", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CharacterClass(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CharacterClass"));  if (!yymatchChar(yy, '[')) goto l132;
  {  int yypos135= yy->__pos, yythunkpos135= yy->__thunkpos;  if (!yymatchChar(yy, ']')) goto l135;  goto l132;
  l135:;	  yy->__pos= yypos135; yy->__thunkpos= yythunkpos135;
  }  if (!yymatchDot(yy)) goto l132;
  l133:;	
  {  int yypos134= yy->__pos, yythunkpos134= yy->__thunkpos;
  {  int yypos136= yy->__pos, yythunkpos136= yy->__thunkpos;  if (!yymatchChar(yy, ']')) goto l136;  goto l134;
  l136:;	  yy->__pos= yypos136; yy->__thunkpos= yythunkpos136;
  }  if (!yymatchDot(yy)) goto l134;  goto l133;
  l134:;	  yy->__pos= yypos134; yy->__thunkpos= yythunkpos134;
  }  if (!yymatchChar(yy, ']')) goto l132;
  yyprintf((stderr, "  ok   %s @ %s\n", "CharacterClass", yy->__buf+yy->__pos));
  return 1;
  l132:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CharacterClass", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Wildcard(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Wildcard"));  if (!yymatchChar(yy, '*')) goto l137;
  yyprintf((stderr, "  ok   %s @ %s\n", "Wildcard", yy->__buf+yy->__pos));
  return 1;
  l137:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Wildcard", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_GlobPattern(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "GlobPattern"));
  {  int yypos141= yy->__pos, yythunkpos141= yy->__thunkpos;  if (!yy_Wildcard(yy)) goto l142;  goto l141;
  l142:;	  yy->__pos= yypos141; yy->__thunkpos= yythunkpos141;  if (!yy_CharacterClass(yy)) goto l143;  goto l141;
  l143:;	  yy->__pos= yypos141; yy->__thunkpos= yythunkpos141;  if (!yy_AnyCharGlob(yy)) goto l144;  goto l141;
  l144:;	  yy->__pos= yypos141; yy->__thunkpos= yythunkpos141;  if (!yy_Escape(yy)) goto l138;
  }
  l141:;	
  l139:;	
  {  int yypos140= yy->__pos, yythunkpos140= yy->__thunkpos;
  {  int yypos145= yy->__pos, yythunkpos145= yy->__thunkpos;  if (!yy_Wildcard(yy)) goto l146;  goto l145;
  l146:;	  yy->__pos= yypos145; yy->__thunkpos= yythunkpos145;  if (!yy_CharacterClass(yy)) goto l147;  goto l145;
  l147:;	  yy->__pos= yypos145; yy->__thunkpos= yythunkpos145;  if (!yy_AnyCharGlob(yy)) goto l148;  goto l145;
  l148:;	  yy->__pos= yypos145; yy->__thunkpos= yythunkpos145;  if (!yy_Escape(yy)) goto l140;
  }
  l145:;	  goto l139;
  l140:;	  yy->__pos= yypos140; yy->__thunkpos= yythunkpos140;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "GlobPattern", yy->__buf+yy->__pos));
  return 1;
  l138:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "GlobPattern", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Substitution(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Substitution"));
  {  int yypos150= yy->__pos, yythunkpos150= yy->__thunkpos;  if (!yy_VariableSubstitution(yy)) goto l151;  goto l150;
  l151:;	  yy->__pos= yypos150; yy->__thunkpos= yythunkpos150;  if (!yy_CommandSubstitution(yy)) goto l152;  goto l150;
  l152:;	  yy->__pos= yypos150; yy->__thunkpos= yythunkpos150;  if (!yy_ArithmeticSubstitution(yy)) goto l149;
  }
  l150:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Substitution", yy->__buf+yy->__pos));
  return 1;
  l149:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Substitution", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_AnyCharExceptSpace(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "AnyCharExceptSpace"));
  {  int yypos154= yy->__pos, yythunkpos154= yy->__thunkpos;  if (!yymatchClass(yy, (unsigned char *)"\000\002\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")) goto l154;  goto l153;
  l154:;	  yy->__pos= yypos154; yy->__thunkpos= yythunkpos154;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "AnyCharExceptSpace", yy->__buf+yy->__pos));
  return 1;
  l153:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "AnyCharExceptSpace", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_String(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "String"));  if (!yymatchChar(yy, '"')) goto l155;
  l156:;	
  {  int yypos157= yy->__pos, yythunkpos157= yy->__thunkpos;
  {  int yypos158= yy->__pos, yythunkpos158= yy->__thunkpos;  if (!yy_AnyCharacter(yy)) goto l159;  goto l158;
  l159:;	  yy->__pos= yypos158; yy->__thunkpos= yythunkpos158;  if (!yy_Substitution(yy)) goto l157;
  }
  l158:;	  goto l156;
  l157:;	  yy->__pos= yypos157; yy->__thunkpos= yythunkpos157;
  }  if (!yymatchChar(yy, '"')) goto l155;
  yyprintf((stderr, "  ok   %s @ %s\n", "String", yy->__buf+yy->__pos));
  return 1;
  l155:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "String", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Redirections(yycontext *yy)
{
  yyprintf((stderr, "%s\n", "Redirections"));
  l161:;	
  {  int yypos162= yy->__pos, yythunkpos162= yy->__thunkpos;  if (!yy_Redirection(yy)) goto l162;  goto l161;
  l162:;	  yy->__pos= yypos162; yy->__thunkpos= yythunkpos162;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Redirections", yy->__buf+yy->__pos));
  return 1;
}
YY_RULE(int) yy_Word(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Word"));
  {  int yypos164= yy->__pos, yythunkpos164= yy->__thunkpos;  if (!yy_String(yy)) goto l165;  goto l164;
  l165:;	  yy->__pos= yypos164; yy->__thunkpos= yythunkpos164;  if (!yy_AnyCharExceptSpace(yy)) goto l166;  goto l164;
  l166:;	  yy->__pos= yypos164; yy->__thunkpos= yythunkpos164;  if (!yy_Substitution(yy)) goto l163;
  }
  l164:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Word", yy->__buf+yy->__pos));
  return 1;
  l163:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Word", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_TestCommand(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "TestCommand"));  if (!yymatchChar(yy, '[')) goto l167;  if (!yy_TestExpression(yy)) goto l167;  if (!yymatchChar(yy, ']')) goto l167;
  yyprintf((stderr, "  ok   %s @ %s\n", "TestCommand", yy->__buf+yy->__pos));
  return 1;
  l167:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "TestCommand", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CompoundCommand(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CompoundCommand"));
  {  int yypos169= yy->__pos, yythunkpos169= yy->__thunkpos;  if (!yymatchChar(yy, '{')) goto l169;  goto l170;
  l169:;	  yy->__pos= yypos169; yy->__thunkpos= yythunkpos169;
  }
  l170:;	
  l171:;	
  {  int yypos172= yy->__pos, yythunkpos172= yy->__thunkpos;  if (!yy_Command(yy)) goto l172;  goto l171;
  l172:;	  yy->__pos= yypos172; yy->__thunkpos= yythunkpos172;
  }
  {  int yypos173= yy->__pos, yythunkpos173= yy->__thunkpos;  if (!yymatchChar(yy, '}')) goto l173;  goto l174;
  l173:;	  yy->__pos= yypos173; yy->__thunkpos= yythunkpos173;
  }
  l174:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "CompoundCommand", yy->__buf+yy->__pos));
  return 1;
  l168:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CompoundCommand", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Redirection(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Redirection"));
  {  int yypos176= yy->__pos, yythunkpos176= yy->__thunkpos;  if (!yy_InputRedirection(yy)) goto l177;  goto l176;
  l177:;	  yy->__pos= yypos176; yy->__thunkpos= yythunkpos176;  if (!yy_OutputRedirection(yy)) goto l178;  goto l176;
  l178:;	  yy->__pos= yypos176; yy->__thunkpos= yythunkpos176;  if (!yy_AppendOutputRedirection(yy)) goto l179;  goto l176;
  l179:;	  yy->__pos= yypos176; yy->__thunkpos= yythunkpos176;  if (!yy_DuplicateOutputRedirection(yy)) goto l180;  goto l176;
  l180:;	  yy->__pos= yypos176; yy->__thunkpos= yythunkpos176;  if (!yy_DuplicateInputRedirection(yy)) goto l181;  goto l176;
  l181:;	  yy->__pos= yypos176; yy->__thunkpos= yythunkpos176;  if (!yy_HereDocument(yy)) goto l182;  goto l176;
  l182:;	  yy->__pos= yypos176; yy->__thunkpos= yythunkpos176;  if (!yy_HereString(yy)) goto l175;
  }
  l176:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Redirection", yy->__buf+yy->__pos));
  return 1;
  l175:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Redirection", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Comment(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Comment"));  if (!yymatchChar(yy, '#')) goto l183;
  l184:;	
  {  int yypos185= yy->__pos, yythunkpos185= yy->__thunkpos;  if (!yy_AnyCharacter(yy)) goto l185;  goto l184;
  l185:;	  yy->__pos= yypos185; yy->__thunkpos= yythunkpos185;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Comment", yy->__buf+yy->__pos));
  return 1;
  l183:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Comment", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_VariableAssignment(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "VariableAssignment"));  if (!yy_Name(yy)) goto l186;  if (!yymatchChar(yy, '=')) goto l186;  if (!yy_Word(yy)) goto l186;
  yyprintf((stderr, "  ok   %s @ %s\n", "VariableAssignment", yy->__buf+yy->__pos));
  return 1;
  l186:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "VariableAssignment", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_FunctionDefinition(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "FunctionDefinition"));
  {  int yypos188= yy->__pos, yythunkpos188= yy->__thunkpos;  if (!yymatchString(yy, "function")) goto l188;  goto l189;
  l188:;	  yy->__pos= yypos188; yy->__thunkpos= yythunkpos188;
  }
  l189:;	  if (!yy_Name(yy)) goto l187;  if (!yymatchString(yy, "()")) goto l187;  if (!yy_CompoundCommand(yy)) goto l187;
  yyprintf((stderr, "  ok   %s @ %s\n", "FunctionDefinition", yy->__buf+yy->__pos));
  return 1;
  l187:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "FunctionDefinition", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_CaseStatement(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "CaseStatement"));  if (!yymatchString(yy, "case")) goto l190;  if (!yy_Word(yy)) goto l190;  if (!yymatchString(yy, "in")) goto l190;
  l191:;	
  {  int yypos192= yy->__pos, yythunkpos192= yy->__thunkpos;  if (!yymatchChar(yy, '(')) goto l192;  if (!yy_PatternList(yy)) goto l192;  if (!yymatchChar(yy, ')')) goto l192;  if (!yy_CompoundCommand(yy)) goto l192;  if (!yymatchString(yy, ";;")) goto l192;  goto l191;
  l192:;	  yy->__pos= yypos192; yy->__thunkpos= yythunkpos192;
  }  if (!yymatchString(yy, "esac")) goto l190;
  yyprintf((stderr, "  ok   %s @ %s\n", "CaseStatement", yy->__buf+yy->__pos));
  return 1;
  l190:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "CaseStatement", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_ForLoop(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "ForLoop"));  if (!yymatchString(yy, "for")) goto l193;  if (!yy_Name(yy)) goto l193;  if (!yymatchString(yy, "in")) goto l193;  if (!yy_WordList(yy)) goto l193;  if (!yymatchString(yy, "do")) goto l193;  if (!yy_CompoundCommand(yy)) goto l193;  if (!yymatchString(yy, "done")) goto l193;
  yyprintf((stderr, "  ok   %s @ %s\n", "ForLoop", yy->__buf+yy->__pos));
  return 1;
  l193:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "ForLoop", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_WhileLoop(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "WhileLoop"));  if (!yymatchString(yy, "while")) goto l194;  if (!yy_CompoundCommand(yy)) goto l194;  if (!yymatchString(yy, "do")) goto l194;  if (!yy_CompoundCommand(yy)) goto l194;  if (!yymatchString(yy, "done")) goto l194;
  yyprintf((stderr, "  ok   %s @ %s\n", "WhileLoop", yy->__buf+yy->__pos));
  return 1;
  l194:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "WhileLoop", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_ElifStatement(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "ElifStatement"));  if (!yymatchString(yy, "elif")) goto l195;  if (!yy_CompoundCommand(yy)) goto l195;  if (!yymatchString(yy, "then")) goto l195;  if (!yy_CompoundCommand(yy)) goto l195;
  yyprintf((stderr, "  ok   %s @ %s\n", "ElifStatement", yy->__buf+yy->__pos));
  return 1;
  l195:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "ElifStatement", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_IfStatement(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "IfStatement"));
  {  int yypos197= yy->__pos, yythunkpos197= yy->__thunkpos;  if (!yymatchString(yy, "if")) goto l198;  if (!yy_CompoundCommand(yy)) goto l198;  if (!yymatchString(yy, "then")) goto l198;  if (!yy_CompoundCommand(yy)) goto l198;
  {  int yypos199= yy->__pos, yythunkpos199= yy->__thunkpos;  if (!yymatchString(yy, "else")) goto l199;  if (!yy_CompoundCommand(yy)) goto l199;  goto l200;
  l199:;	  yy->__pos= yypos199; yy->__thunkpos= yythunkpos199;
  }
  l200:;	  if (!yymatchString(yy, "fi")) goto l198;  goto l197;
  l198:;	  yy->__pos= yypos197; yy->__thunkpos= yythunkpos197;  if (!yymatchString(yy, "if")) goto l196;  if (!yy_CompoundCommand(yy)) goto l196;  if (!yymatchString(yy, "then")) goto l196;  if (!yy_CompoundCommand(yy)) goto l196;  if (!yymatchString(yy, "fi")) goto l196;
  }
  l197:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "IfStatement", yy->__buf+yy->__pos));
  return 1;
  l196:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "IfStatement", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Pipeline(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Pipeline"));  if (!yy_Command(yy)) goto l201;
  l202:;	
  {  int yypos203= yy->__pos, yythunkpos203= yy->__thunkpos;  if (!yymatchChar(yy, '|')) goto l203;  if (!yy_Command(yy)) goto l203;  goto l202;
  l203:;	  yy->__pos= yypos203; yy->__thunkpos= yythunkpos203;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Pipeline", yy->__buf+yy->__pos));
  return 1;
  l201:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Pipeline", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_SimpleCommand(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "SimpleCommand"));
  l205:;	
  {  int yypos206= yy->__pos, yythunkpos206= yy->__thunkpos;  if (!yy_Word(yy)) goto l206;  goto l205;
  l206:;	  yy->__pos= yypos206; yy->__thunkpos= yythunkpos206;
  }
  {  int yypos207= yy->__pos, yythunkpos207= yy->__thunkpos;  if (!yy_Redirections(yy)) goto l207;  goto l208;
  l207:;	  yy->__pos= yypos207; yy->__thunkpos= yythunkpos207;
  }
  l208:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "SimpleCommand", yy->__buf+yy->__pos));
  return 1;
  l204:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "SimpleCommand", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Eof(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Eof"));
  {  int yypos210= yy->__pos, yythunkpos210= yy->__thunkpos;  if (!yymatchDot(yy)) goto l210;  goto l209;
  l210:;	  yy->__pos= yypos210; yy->__thunkpos= yythunkpos210;
  }
  yyprintf((stderr, "  ok   %s @ %s\n", "Eof", yy->__buf+yy->__pos));
  return 1;
  l209:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Eof", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Command(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Command"));
  {  int yypos212= yy->__pos, yythunkpos212= yy->__thunkpos;  if (!yy_SimpleCommand(yy)) goto l213;  goto l212;
  l213:;	  yy->__pos= yypos212; yy->__thunkpos= yythunkpos212;  if (!yy_Pipeline(yy)) goto l214;  goto l212;
  l214:;	  yy->__pos= yypos212; yy->__thunkpos= yythunkpos212;  if (!yy_IfStatement(yy)) goto l215;  goto l212;
  l215:;	  yy->__pos= yypos212; yy->__thunkpos= yythunkpos212;  if (!yy_ElifStatement(yy)) goto l216;  goto l212;
  l216:;	  yy->__pos= yypos212; yy->__thunkpos= yythunkpos212;  if (!yy_WhileLoop(yy)) goto l217;  goto l212;
  l217:;	  yy->__pos= yypos212; yy->__thunkpos= yythunkpos212;  if (!yy_ForLoop(yy)) goto l218;  goto l212;
  l218:;	  yy->__pos= yypos212; yy->__thunkpos= yythunkpos212;  if (!yy_CaseStatement(yy)) goto l219;  goto l212;
  l219:;	  yy->__pos= yypos212; yy->__thunkpos= yythunkpos212;  if (!yy_FunctionDefinition(yy)) goto l220;  goto l212;
  l220:;	  yy->__pos= yypos212; yy->__thunkpos= yythunkpos212;  if (!yy_VariableAssignment(yy)) goto l221;  goto l212;
  l221:;	  yy->__pos= yypos212; yy->__thunkpos= yythunkpos212;  if (!yy_Comment(yy)) goto l222;  goto l212;
  l222:;	  yy->__pos= yypos212; yy->__thunkpos= yythunkpos212;  if (!yy_Redirection(yy)) goto l223;  goto l212;
  l223:;	  yy->__pos= yypos212; yy->__thunkpos= yythunkpos212;  if (!yy_CompoundCommand(yy)) goto l224;  goto l212;
  l224:;	  yy->__pos= yypos212; yy->__thunkpos= yythunkpos212;  if (!yy_TestCommand(yy)) goto l211;
  }
  l212:;	
  yyprintf((stderr, "  ok   %s @ %s\n", "Command", yy->__buf+yy->__pos));
  return 1;
  l211:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Command", yy->__buf+yy->__pos));
  return 0;
}
YY_RULE(int) yy_Program(yycontext *yy)
{  int yypos0= yy->__pos, yythunkpos0= yy->__thunkpos;
  yyprintf((stderr, "%s\n", "Program"));
  l226:;	
  {  int yypos227= yy->__pos, yythunkpos227= yy->__thunkpos;  if (!yy_Command(yy)) goto l227;  goto l226;
  l227:;	  yy->__pos= yypos227; yy->__thunkpos= yythunkpos227;
  }  if (!yy_Eof(yy)) goto l225;
  yyprintf((stderr, "  ok   %s @ %s\n", "Program", yy->__buf+yy->__pos));
  return 1;
  l225:;	  yy->__pos= yypos0; yy->__thunkpos= yythunkpos0;
  yyprintf((stderr, "  fail %s @ %s\n", "Program", yy->__buf+yy->__pos));
  return 0;
}

#ifndef YY_PART

typedef int (*yyrule)(yycontext *yy);

YY_PARSE(int) YYPARSEFROM(YY_CTX_PARAM_ yyrule yystart)
{
  int yyok;
  if (!yyctx->__buflen)
    {
      yyctx->__buflen= YY_BUFFER_SIZE;
      yyctx->__buf= (char *)YY_MALLOC(yyctx, yyctx->__buflen);
      yyctx->__textlen= YY_BUFFER_SIZE;
      yyctx->__text= (char *)YY_MALLOC(yyctx, yyctx->__textlen);
      yyctx->__thunkslen= YY_STACK_SIZE;
      yyctx->__thunks= (yythunk *)YY_MALLOC(yyctx, sizeof(yythunk) * yyctx->__thunkslen);
      yyctx->__valslen= YY_STACK_SIZE;
      yyctx->__vals= (YYSTYPE *)YY_MALLOC(yyctx, sizeof(YYSTYPE) * yyctx->__valslen);
      yyctx->__begin= yyctx->__end= yyctx->__pos= yyctx->__limit= yyctx->__thunkpos= 0;
    }
  yyctx->__begin= yyctx->__end= yyctx->__pos;
  yyctx->__thunkpos= 0;
  yyctx->__val= yyctx->__vals;
  yyok= yystart(yyctx);
  if (yyok) yyDone(yyctx);
  yyCommit(yyctx);
  return yyok;
}

YY_PARSE(int) YYPARSE(YY_CTX_PARAM)
{
  return YYPARSEFROM(YY_CTX_ARG_ yy_Program);
}

YY_PARSE(yycontext *) YYRELEASE(yycontext *yyctx)
{
  if (yyctx->__buflen)
    {
      yyctx->__buflen= 0;
      YY_FREE(yyctx, yyctx->__buf);
      YY_FREE(yyctx, yyctx->__text);
      YY_FREE(yyctx, yyctx->__thunks);
      YY_FREE(yyctx, yyctx->__vals);
    }
  return yyctx;
}

#endif
