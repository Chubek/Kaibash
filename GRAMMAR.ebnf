PowerShell ::= Scripts

Scripts ::= InputElements [SignatureBlock]

InputElements ::= InputElement | InputElements InputElement

InputElement ::= Whitespace | Comment | Token

SignatureBlock ::= SignatureBegin Signature SignatureEnd

SignatureBegin ::= NewLineCharacter "# SIG # Begin signature block" NewLineCharacter

Signature ::= Base64EncodedSignatureBlobInComments

SignatureEnd ::= NewLineCharacter "# SIG # End signature block" NewLineCharacter

NewLineCharacter ::= CarriageReturnCharacter | LineFeedCharacter | CarriageReturnCharacter LineFeedCharacter

Comments ::= SingleLineComment | RequiresComment | DelimitedComment

SingleLineComment ::= "# " InputCharacters

InputCharacters ::= InputCharacter | InputCharacters InputCharacter

InputCharacter ::= AnyCharacterExceptNewline

RequiresComment ::= "#requires whitespace command-arguments"

Dash ::= "-" | EnDashCharacter | EmDashCharacter | HorizontalBarCharacter

DashDash ::= Dash Dash

DelimitedComment ::= "<# " DelimitedCommentText " >"

DelimitedCommentText ::= DelimitedCommentSection | DelimitedCommentText DelimitedCommentSection

DelimitedCommentSection ::= ">" | Hashes NotGreaterThanOrHash

Hashes ::= "#" | Hashes "#"

NotGreaterThanOrHash ::= AnyUnicodeCharacterExceptGreaterThanOrHash

Whitespace ::= AnyCharacterWithUnicodeClassZsZlOrZp | HorizontalTabCharacter | VerticalTabCharacter | FormFeedCharacter | "`" NewLineCharacter

Tokens ::= Keyword | Variable | Command | CommandParameter | CommandArgumentToken | IntegerLiteral | RealLiteral | StringLiteral | TypeLiteral | OperatorOrPunctuator

Keywords ::= "begin" | "break" | "catch" | "class" | "continue" | "data" | "define" | "do" | "dynamicparam" | "else" | "elseif" | "end" | "exit" | "filter" | "finally" | "for" | "foreach" | "from" | "function" | "if" | "in" | "inlinescript" | "parallel" | "param" | "process" | "return" | "switch" | "throw" | "trap" | "try" | "until" | "using" | "var" | "while" | "workflow"

Variables ::= "$$" | "$?" | "$^" | "$" [VariableScope] VariableCharacters | "@" [VariableScope] VariableCharacters | BracedVariable

BracedVariable ::= "${" [VariableScope] BracedVariableCharacters "}"

VariableScope ::= "global:" | "local:" | "private:" | "script:" | "using:" | "workflow:" | VariableNamespace

VariableNamespace ::= VariableCharacters ":"

VariableCharacters ::= VariableCharacter | VariableCharacters VariableCharacter

VariableCharacter ::= UnicodeCharacterOfClassesLuLlLtLmLoOrNd | "_" | "?"

BracedVariableCharacters ::= BracedVariableCharacter | BracedVariableCharacters BracedVariableCharacter

BracedVariableCharacter ::= AnyUnicodeCharacterExceptCurlyBraceOrBacktick | EscapedCharacter

EscapedCharacter ::= "`" AnyUnicodeCharacter

Commands ::= GenericToken

GenericToken ::= GenericTokenParts

GenericTokenParts ::= GenericTokenPart | GenericTokenParts GenericTokenPart

GenericTokenPart ::= ExpandableStringLiteral | VerbatimHereStringLiteral | Variable | GenericTokenChar

GenericTokenChar ::= AnyUnicodeCharacterExceptCurlyBracesParenthesesSemicolonCommaVerticalBarAmpersandDollarsDoubleQuoteSingleQuoteWhitespaceNewLineBacktick

GenericTokenWithSubexprStart ::= GenericTokenParts "$("

Parameters ::= CommandParameter

CommandParameter ::= Dash FirstParameterChar ParameterChars [Colon]

FirstParameterChar ::= UnicodeString | "_"

ParameterChars ::= ParameterChar | ParameterChars ParameterChar

ParameterChar ::= AnyUnicodeCharacterExceptCurlyBracesSemicolonCommaVerticalBarAmpersandDotLeftSquareBracketColonWhitespaceNewLine

Colon ::= ":"

VerbatimCommandArgumentChars ::= VerbatimCommandArgumentPart | VerbatimCommandArgumentChars VerbatimCommandArgumentPart

VerbatimCommandArgumentPart ::= VerbatimCommandString | "&" NonAmpersandCharacter | AnyUnicodeCharacterExceptVerticalBarNewLine

NonAmpersandCharacter ::= AnyUnicodeCharacterExceptAmpersand

VerbatimCommandString ::= DoubleQuoteCharacter NonDoubleQuoteChars DoubleQuoteCharacter

NonDoubleQuoteChars ::= NonDoubleQuoteChar | NonDoubleQuoteChars NonDoubleQuoteChar

NonDoubleQuoteChar ::= AnyUnicodeCharacterExceptDoubleQuoteCharacter

Lierals ::= IntegerLiteral | RealLiteral | StringLiteral

IntegerLiterals ::= DecimalIntegerLiteral | HexadecimalIntegerLiteral

DecimalIntegerLiteral ::= DecimalDigits [NumericTypeSuffix] [NumericMultiplier]

DecimalDigits ::= DecimalDigit | DecimalDigits DecimalDigit

DecimalDigit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

NumericTypeSuffix ::= LongTypeSuffix | DecimalTypeSuffix

HexadecimalIntegerLiteral ::= "0x" HexadecimalDigits [LongTypeSuffix] [NumericMultiplier]

HexadecimalDigits ::= HexadecimalDigit | HexadecimalDigits HexadecimalDigit

HexadecimalDigit ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "a" | "b" | "c" | "d" | "e" | "f"

LongTypeSuffix ::= "l"

NumericMultiplier ::= "kb" | "mb" | "gb" | "tb" | "pb"

RealLiteral ::= DecimalDigits "." DecimalDigits [ExponentPart] [DecimalTypeSuffix] [NumericMultiplier] | "." DecimalDigits [ExponentPart] [DecimalTypeSuffix] [NumericMultiplier] | DecimalDigits ExponentPart [DecimalTypeSuffix] [NumericMultiplier]

ExponentPart ::= "e" Sign DecimalDigits

Sign ::= "+" | Dash

DecimalTypeSuffix ::= "d" | "l"

StringLiteral ::= ExpandableStringLiteral | ExpandableHereStringLiteral | VerbatimStringLiteral | VerbatimHereStringLiteral

ExpandableStringLiteral ::= DoubleQuoteCharacter ExpandableStringCharacters [Dollars] DoubleQuoteCharacter

DoubleQuoteCharacter ::= "\"" | LeftDoubleQuotationMark | RightDoubleQuotationMark | DoubleLow9QuotationMark

ExpandableStringCharacters ::= ExpandableStringPart | ExpandableStringCharacters ExpandableStringPart

ExpandableStringPart ::= AnyUnicodeCharacterExceptDollarsDoubleQuoteCharacterBacktick | BracedVariable | "$" AnyUnicodeCharacterExcept"({"$" EscapedCharacter

Dollars ::= "$" | Dollars "$"

ExpandableHereStringLiteral ::= "@" DoubleQuoteCharacter Whitespace [NewLineCharacter] ExpandableHereStringCharacters [NewLineCharacter] DoubleQuoteCharacter "@"

ExpandableHereStringCharacters ::= ExpandableHereStringPart | ExpandableHereStringCharacters ExpandableHereStringPart

ExpandableHereStringPart ::= AnyUnicodeCharacterExceptDollarsNewLineCharacter | BracedVariable | "$" AnyUnicodeCharacterExcept"({"$" NewLineCharacter AnyUnicodeCharacterExceptDoubleQuoteChar | "$" NewLineCharacter DoubleQuoteCharacter AnyUnicodeCharacterExcept"@" | NewLineCharacter AnyUnicodeCharacterExceptDoubleQuoteCharacter | NewLineCharacter DoubleQuoteCharacter AnyUnicodeCharacterExcept"@" 

ExpandableStringWithSubexprStart ::= DoubleQuoteCharacter ExpandableStringChars [Dollars] "$("

ExpandableStringWithSubexprEnd ::= DoubleQuoteChar

ExpandableHereStringWithSubexprStart ::= "@" DoubleQuoteCharacter Whitespace [NewLineCharacter] ExpandableHereStringChars [Dollars] "$("

ExpandableHereStringWithSubexprEnd ::= NewLineCharacter DoubleQuoteCharacter "@"

VerbatimStringLiteral ::= SingleQuoteCharacter VerbatimStringCharacters SingleQuoteCharacter

SingleQuoteCharacter ::= "'" | LeftSingleQuotationMark | RightSingleQuotationMark | SingleLow9QuotationMark | SingleHighReversed9QuotationMark

VerbatimStringCharacters ::= VerbatimStringPart | VerbatimStringCharacters VerbatimStringPart

VerbatimStringPart ::= AnyUnicodeCharacterExceptSingleQuoteCharacter

VerbatimHereStringLiteral ::= "@" SingleQuoteCharacter Whitespace [NewLineCharacter] VerbatimHereStringCharacters [NewLineCharacter] SingleQuoteCharacter "@"

VerbatimHereStringCharacters ::= VerbatimHereStringPart | VerbatimHereStringCharacters VerbatimHereStringPart

VerbatimHereStringPart ::= AnyUnicodeCharacterExceptNewLineCharacter | NewLineCharacter AnyUnicodeCharacterExceptSingleQuoteCharacter | NewLineCharacter SingleQuoteCharacter AnyUnicodeCharacterExcept"@" 

TypeNames ::= TypeName | TypeName "." TypeIdentifier

TypeName ::= TypeCharacters

TypeIdentifier ::= TypeCharacters

TypeCharacters ::= TypeCharacter | TypeCharacters TypeCharacter

TypeCharacter ::= UnicodeString | "_"

ArrayTypeNames ::= TypeName "["

GenericTypeNames ::= TypeName "["

OperatorsAndPunctuators ::= OperatorOrPunctuator

OperatorOrPunctuator ::= "{" | "}" | "[" | "]" | "(" | ")" | "@(" | "@{" | "$(" | ";" | "&&" | "||" | "&" | "|" | "," | "++" | ".." | "::" | "." | "!" | "*" | "/" | "%" | "+" | "-" | "--" | "-and" | "-band" | "-bnot" | "-bor" | "-bxor" | "-not" | "-or" | "-xor" | AssignmentOperator | MergingRedirectionOperator | FileRedirectionOperator | ComparisonOperator | FormatOperator

AssignmentOperator ::= "=" | "-=" | "+=" | "*=" | "/=" | "%="

FileRedirectionOperator ::= ">" | ">>" | "2>" | "2>>" | "3>" | "3>>" | "4>" | "4>>" | "5>" | "5>>" | "6>" | "6>>" | "*>"

MergingRedirectionOperator ::= "*>&1" | "2>&1" | "3>&1" | "4>&1" | "5>&1" | "6>&1" | "*>&2" | "1>&2" | "3>&2" | "4>&2" | "5>&2" | "6>&2"

ComparisonOperator ::= "-as" | "-ccontains" | "-ceq" | "-cge" | "-cgt" | "-cle" | "-clike" | "-clt" | "-cmatch" | "-cne" | "-cnotcontains" | "-cnotlike" | "-cnotmatch" | "-contains" | "-creplace" | "-csplit" | "-eq" | "-ge" | "-gt" | "-icontains" | "-ieq" | "-ige" | "-igt" | "-ile" | "-ilike" | "-ilt" | "-imatch" | "-in" | "-ine" | "-inotcontains" | "-inotlike" | "-inotmatch" | "-ireplace" | "-is" | "-isnot" | "-isplit" | "-join" | "-le" | "-like" | "-lt" | "-match" | "-ne" | "-notcontains" | "-notin" | "-notlike" | "-notmatch" | "-replace" | "-shl*" | "-shr" | "-split"

FormatOperator ::= "-f"

EscapedCharacter ::= "`" AnyUnicodeCharacter .
